==== Moving around on the command line ====
<sxh bash>
ctrl-a  # Move to the start of line
ctrl-e  # Move to end of a line

ctrl-k  # Remove (Cut) text after the cursor
ctrl-y  # Yank text (Copy)

ctrl-r  # Search previous command from history
</sxh>

While ''!$'' is not a keybinding, you end up with the same result. But in this case, the shell will only substitute ''!$'' with the last argument of the previous command only after you have pressed enter:
<sxh bash>
larso@goethe:~$ mkdir /var/tmp/foo
larso@goethe:~$ cd !$
cd /var/tmp/foo
larso@goethe:/var/tmp/foo$ </sxh>

====Brace Expansion====
<sxh bash>echo foo{1,2,3}.txt # Output: foo1.txt foo2.txt foo3.txt</sxh>

Some examples:
<sxh bash>
### I am using echo for demo purpose only ####
echo file.txt{,.bak}
echo file-{a..d}.txt
echo mkdir -p /apache-jail/{usr,bin,lib64,dev}
echo cp httpd.conf{,.backup}
echo mv delta.{txt,doc}
</sxh>
Quickly create backup file:
<sxh bash>cp -v file1.txt{,.bak} # Output: file1.txt -> file1.txt.bak</sxh>
====SCP - Secure Copy Over SSH====
Copy the file "foobar.txt" from the local host to a remote host:
<sxh bash>scp foobar.txt your_username@remotehost.edu:/some/remote/directory</sxh> 
Copy the file "foobar.txt" from a remote host to the local host:
<sxh bash>scp your_username@remotehost.edu:foobar.txt /some/local/directory</sxh>
Copy the directory "foo" from the local host to a remote host's directory "bar":
<sxh bash>scp -r foo your_username@remotehost.edu:/some/remote/directory/bar</sxh>
Copy the file "foobar.txt" from remote host "rh1.edu" to remote host "rh2.edu":
<sxh bash>scp your_username@rh1.edu:/some/remote/directory/foobar.txt \
your_username@rh2.edu:/some/remote/directory/ </sxh>
Copy the file "foobar.txt" from the local host to a remote host using port 2264:
<sxh bash>scp -P 2264 foobar.txt your_username@remotehost.edu:/some/remote/directory</sxh>

==== Copy file to multiple directories using simple loop ====
<code bash>for dest in /dir1/ /dir2/ ; do cp -v file "$dest" ; done
for dest in /tmp/1/ /tmp2/ $HOME/3/ ; do cp -v "/etc/resolv.conf" "$dest" ; done</code>
==== Delete Files Using Extended Pattern Matching Operators ====

The different extended pattern matching operators are listed below, where pattern-list is a list containing one or more filenames, separated using the | character:

  * ''*(pattern-list)'' – matches zero or more occurrences of the specified patterns
  * ''?(pattern-list)'' – matches zero or one occurrence of the specified patterns
  * ''+(pattern-list)'' – matches one or more occurrences of the specified patterns
  * ''@(pattern-list)'' – matches one of the specified patterns
  * ''!(pattern-list)'' – matches anything except one of the given patterns
To use them, enable the ''extglob'' shell option as follows:
<code bash># shopt -s extglob</code>

=== 1. To delete all files in a directory except filename, type the command below: ===

<code bash>$ rm -v !("filename")</code>

=== 2. To delete all files with the exception of filename1 and filename2: ===
<code bash>$ rm -v !("filename1"|"filename2")</code>

3. The example below shows how to remove all files other than all .zip files interactively:
<code bash>$ rm -i !(*.zip)</code>

4. Next, you can delete all files in a directory apart from all .zip and .odt files as follows, while displaying what is being done:
<code bash>$ rm -v !(*.zip|*.odt)</code>

Once you have all the required commands, turn off the extglob shell option like so:
<code bash>$ shopt -u extglob</code>

====ANSI Colors====
The ANSI escape sequences: ''\033[XXXm'' where ''XXX'' is a series of semicolon-separated parameters.

To say, make text red, bold, and underlined:
<sxh python>
# Python
print("\033[31;1;4mHello\033[0m")
</sxh>
<sxh bash>
# BASH
echo -e "\033[31;1;4mHello\033[0m"
</sxh>

where the first part makes the text red (**31**), bold (**1**), underlined (**4**) and the last part clears all this (0).

**The table below lists the RGB values of the background and foreground colours used for these by a variety of terminal emulators:**

{{https://i.stack.imgur.com/7H7H9.png}}