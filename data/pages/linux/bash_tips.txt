===Check if running as root in a bash script===
<code bash>
if (( $EUID != 0 )); then
    echo "Please run as root"
    exit
fi
</code>

Or inject ''sudo'' when running the script

<code bash>
SUDO=''
if (( $EUID != 0 )); then
    SUDO='sudo'
fi
$SUDO a_command
</code>
=== Printing commands with color===
You can use these ANSI escape codes:

|Black        0;30     |Dark Gray     1;30|
|Red          0;31     |Light Red     1;31|
|Green        0;32     |Light Green   1;32|
|Brown/Orange 0;33     |Yellow        1;33|
|Blue         0;34     |Light Blue    1;34|
|Purple       0;35     |Light Purple  1;35|
|Cyan         0;36     |Light Cyan    1;36|
|Light Gray   0;37     |White         1;37|

And then use them like this in your script:
<code bash>
RED='\033[0;31m'
NC='\033[0m' # No Color
printf "I ${RED}love${NC} Stack Overflow\n"
</code>
which prints love in red.

If you are using the echo command, be sure to use the -e flag to allow backslash escapes.
<code bash>
# Continued from above example
echo -e "I ${RED}love${NC} Stack Overflow\n"
</code>

===Check if os is Linux===
<code bash>
OS_NAME=$(uname -s)
if [ "$OS_NAME" != "Linux" ]; then
	printf '${RED}Sorry, this script is intended for Linux only!'
</code>

===Check if application exists by the exit code (no error if exists)===
Ex. check if apt exists
<code bash>if hash apt 2>/dev/null; then</code>

====Return Values====
If there is an error in the function return 1, otherwise return 0 to continue. 

====Redirecting Standard Output and Standard Error: &> ====
Ex.
<code bash>command_exists () {
    type "$1" &> /dev/null ;
}</code>
''&>'' will redirect stderr & stdout to /dev/null