=====Essential Commands=====
Build the image and push and push it to registry:
<sxh bash>
# docker build -t Registry/Image:tag .
docker build -f Dockerfile_tests -t docker.mot-solutions.com/msi/sessionmanager-pytests .
docker push docker.mot-solutions.com/msi/sessionmanager-pytests
# Use multiple tags
docker build -t whenry/fedora-jboss:latest -t whenry/fedora-jboss:v2.1 .
</sxh>
Make changes in a container, commit those changes in the image and push to registry:
<sxh>
docker commit -m "message" -a "author" IMAGE_ID REGISTRY/NAME:TAG
docker tag IMAGE_ID REGISTRY/IMAGE:TAG
docker push REGISTRY/IMAGE:TAG
</sxh> 
Copy files from/to a container:
<sxh bash>
docker cp foo.txt mycontainer:/foo.txt # Copy from host to container
docker cp mycontainer:/foo.txt foo.txt # Copy form container to host
</sxh>
Quit/Detach out of the docker container: **Ctrl-p, Ctrl-q**
=====Overview=====
  * One process per container (usually). Containers exists while processes inside of them are running. Once they stop the container will stop as well.
  * Only top layer is writable using the Union Mounts
  * **PID1** (ProcessID1 inside a container) is usually an application process and not Init
  * Outside of a container the same process will be seen by host as different ProcessID

<sxh bash>docker run <img> /bin/bash -c "command" # Run a command in a container</sxh>

<sxh bash>
docker commit <img_ID> <name>           # Takes the changes and creates new image called fridge
docker save -o /tmp/<name>.tar <img_ID> # Save image to a file (tar)
docker load -i /tmp/<name>.tar          # Import image
</sxh>

^Command ^Example ^What it does |
|-d| |Detached, in the background|
|-it||Interactive with pseudo terminal|
|-p| **-p 80:3000** |Specify port(s). Here -p maps port 80 of host to 3000 in a container|
|-P| |Random docker host port assignment with ports from Dockerfile|
|--name|**docker run --name 'my_container'**|Name for the container|
|-v| |Maps Host Volume to container directory|
|-e|''-e CONFIG='config.json' ''|Env Variable|
|ctrl+p ctrl+q| **ctrl+p ctrl+q**|Detach from container without stopping it|
|--restart=unless-stopped|''docker run ... --restart=unless-stopped''|Restart container unless manually stopped|
====Container Management====
''Ctr+P+Q'' - Get back to terminal of docker host without terminating container

^Options ^What it does |
|docker stop <img_ID> | Gracefully stop a container (SIGTERM to PID1)|
|docker start <img_ID>| Start docker container|
|docker restart <img_ID>| Restart container|
|docker attach <img_ID>| Attach to a PID1 inside container ''AVOID'' Use docker exec instead|
|docker ''exec'' -it <img_ID> /bin/bash| Enter the container using Bash|
|docker rm <img_ID>| Delete a container (Can't be running)|
|docker ps <img_ID>| Process list from a container|
|docker logs ID/Name| Shows logs for a container. Follow a log with: **docker logs -f <ID>**|
|docker inspect <ID>| Low level info about a container|
|docker history <ID>| Lists "events", things that happened in a container|
|docker port //container//| Port mapping|

====Dockerfile====
Allows for creating images using the plain text Dockerfile.

^Command ^Parameter ^Example|
|#|Comment|
|LABEL|**LABEL** com.example.version=''"0.0.1-beta"'' com.example.release-date=''"2015-02-12"''||
|FROM| Base Image to base the container on|**FROM busybox**|
|COPY|Copy from host/container to container(COPY is preferable over ADD)|COPY requirements.txt /tmp/|
|RUN| Build-time actions. Each RUN command will create layer in an image (use && to avoid)|RUN apt-get update && apt-get install|
|ENV| Variables.|**ENV var1=value**|
|VOLUME| Specify volume inside a container. Ex: /data ''doesn't allow host mount''|
|EXPOSE| Expose port(s) to docker host|EXPOSE 80 443|
|ENTRYPOINT| Run-time command. Can't be overwritten by docker run commands. Those commands will be interpreted as arguments to ENTRYPOINT instructions.|
|CMD| Run-time command. Shell or Exec form. Will be overwritten by a command at the end of docker run <command>\\ ** - Exec Form:** ["echo","Hello World"] -- does not expand variables\\ **- Shell Form:** uses /bin/bash -c|CMD echo "Hello World"|

**NOTE**
COPY obeys the following rules:

The ''<src>'' path must be inside the context of the build; you cannot **COPY** ../something /something, because the first step of a docker build is to send the context directory (and subdirectories) to the docker daemon.

If ''<src>'' is a directory, the entire contents of the directory are copied, including filesystem metadata.
====Registry====
You need to tag your image correctly first with your registryhost:

<sxh>docker tag [OPTIONS] IMAGE[:TAG] [REGISTRYHOST/][USERNAME/]NAME[:TAG]</sxh>
Then docker push using that same tag.
<sxh bash>docker push NAME[:TAG]</sxh>
Example:
<sxh bash>
docker tag myImage myRegistry.com/myImage
docker push myRegistry.com/myImage
</sxh>

====Volumes====
**-v <volume_location>** will specify Volume inside a container. Docker will create that volume when creating container if it doesn't exist. If it does exist unix mount rules apply.

Ex: **-v /container_volume** or **-v /data** or **/test-volume**

To run another container with the same volume mounted use ''--volumes-from=''<container>:
<sxh>docker run --volumes-from=<container> <another_container></sxh>

To specify volume on a docker host for the container to use ''-v /host_vol:/container_vol'':
<sxh>docker run -v /host_data:/container_data</sxh>

Delete volume with **docker rm -v <container>**. Without the **-v** option the volume doesn't get deleted.

====Networking====
''docker0'' virtual bridge interface. 

Each new container gets one interface automatically attached to the ''docker0'' virtual bridge.

Each container uses its own hosts and resolv.conf files located in: **/var/lib/docker/<container_id>/**

Expose ports from within a container using **EXPOSE** parameter in Dockerfile and then specify port mapping using ''-p Host_Port:Container_Port''
<sxh bash>docker run -d -p 3000:80 <base_img> # Map port 80 in a container to port 3000 in a docker host
docker run -d -p 192.168.56.50:300:80 <base_img> # Map port 80 but only to IP:PORT on docker host</sxh>

Expose ports based on EXPOSE parameter in Dockerfile and random high port assignment on docker host using ''-P''
<sxh>docker run -d -P --name=<name> <base_img></sxh>

====Linking Containers====
Use the ''--link='' option to link a container to another:
<sxh bash>docker run -d --link=<source_container>:<alias> <base_img> # Alias can be same as source container</sxh>

The linked container will have network information from the source saved as ENV variables.