====GIT Reset====
If changes have not been pushed upstream, use this command to reset files to commit before the last one (''HEAD~1''):
<sxh>git reset HEAD~1</sxh>
If changes have already been pushed to Github/BitBucket than use this command to revert/remove the last one commit/change and then you can push:
<sxh>git revert HEAD</sxh>
**origin** -- is the repository that files were cloned from\\
**master** -- it's the master branch

====Git Push====
<code bash>
git push  <REMOTENAME> <BRANCHNAME> 
git push origin master # Push changes from local master to remote origin</code>

===Compare local git branch with remote branch===
<code bash>git diff <local branch> <remote>/<remote branch>
git diff master origin/master # Difference between local master and remote origin 
git diff --summary master origin
</code>

===Rename Github Repository===
Find out what remote name(s) refer to that URL
<code bash>git remote -v
origin  git@github.com:someuser/someproject.git</code>
Then, set the new URL
<code bash>git remote set-url origin git@github.com:someuser/newprojectname.git</code>

====Git Branches====
Create the branch on your local machine and switch in this branch:
<sxh bash>git checkout -b [name_of_your_new_branch]</sxh>

First, clone a remote Git repository and cd into it:
<sxh bash>
$ git clone git://example.com/myproject
$ cd myproject
</sxh>
Next, look at the local branches in your repository:
<sxh bash>
$ git branch
* master</sxh>
But there are other branches hiding in your repository! You can see these using the -a flag:
<sxh bash>
$ git branch -a
* master
  remotes/origin/HEAD
  remotes/origin/master
  remotes/origin/v1.0-stable
  remotes/origin/experimental</sxh>
If you just want to take a quick peek at an upstream branch, you can check it out directly:

<sxh bash>$ git checkout origin/experimental</sxh>
But if you want to work on that branch, you'll need to create a local tracking branch which is done automatically by:

<sxh bash>$ git checkout experimental</sxh>
and you will see
<code>
Branch experimental set up to track remote branch experimental from origin.
Switched to a new branch 'experimental'</code>
That last line throw some people "New branch" - huh? What it really means is a new local branch that gets the branch from the index and creates it locally for you. The previous line is actually more informative as it tells you that the branch is being set up to track the remote branch, which usually means the origin/branch_name branch

Now, if you look at your local branches, this is what you'll see:
<sxh bash>
$ git branch
* experimental
  master</sxh>
===Git Remote===
You can actually track more than one remote repository using git remote.
<sxh bash>
$ git remote add win32 git://example.com/users/joe/myproject-win32-port
$ git branch -a
* master
  remotes/origin/HEAD
  remotes/origin/master
  remotes/origin/v1.0-stable
  remotes/origin/experimental
  remotes/win32/master
  remotes/win32/new-widgets</sxh>

====Advanced====
Checkout single file from another branch to this one:
<sxh bash>
git checkout master               # first get back to master
git checkout experiment -- app.js # then copy the version of app.js 
                                  # from branch "experiment"
</sxh>
''You will only get the most recent state of app.js''

View the file from another branch:
<sxh bash>git show experiment:path/to/relative/app.js</sxh>

====Git Delete====
To delete the local branch use:
<sxh>git branch -d <branch_name></sxh>
The -d option is an alias for --delete, which only deletes the branch if it has already been fully merged in its upstream branch. You could also use -D, which is an alias for --delete --force, which deletes the branch "irrespective of its merged status."
<sxh>git push origin --delete <branch_name></sxh>
Then you should execute this on other machines
<sxh>git fetch --all --prune</sxh>